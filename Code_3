% -------------------------------------------------------------------------
% Course: Hydrology for Engineers
% Assignment 1
% Part 3: Construction of depth-duration-frequency (DDF) curves 
% -------------------------------------------------------------------------

clear variables 
close all 
clc 


% -------------------------------------------------------------------------
% # 1: Calibrate the DDF curve parameters
% useful functions: linspace
% -------------------------------------------------------------------------

load assignment1_output_part2.mat 

c_values = linspace(0,100,50);
f_values = linspace(-1,1,50);
e_values = linspace(0,1,50);

return_periods = {'T10', 'T40', 'T100'};
errors = [25,60,120];


calibrated_params = zeros(length(return_periods), 4); 

for return_periods_index = 1:length(return_periods) 
    T = return_periods{return_periods_index};
    gumbel_data = H_Gum(return_periods_index, :); 
    max_errors = errors(return_periods_index); 

    best_error = inf;
    best_params = zeros(1,3);
    

    for c = c_values
        for f = f_values
            for e = e_values
                error = sum_squared_differences(D, gumbel_data, c, e, f);
                
                if error < best_error 
                    best_error = error;
                    best_params = [c,e,f];  
                end 
            end 
        end
    end
    
  
    calibrated_params(return_periods_index, :) = [best_params, best_error];



   
    fprintf('Best parameters for T=%s years: c=%.2f, e=%.2f, f=%.2f\n', T, best_params(1), best_params(2), best_params(3));
    fprintf('Smallest sum of squared errors: %.2f (target: %.2f)\n', best_error, max_errors);
    
  
    if best_error <= max_errors
        fprintf('The error for T=%s is within the acceptable range!\n', T);
    else
        fprintf('The error for T=%s is above the acceptable range. Try refining the grid.\n', T);
    end
end



param_table = array2table(calibrated_params, 'VariableNames', {'c', 'e', 'f', 'Error'}, ...
                           'RowNames', return_periods);
disp(param_table); 



% -------------------------------------------------------------------------
% # 2: Plot
% -------------------------------------------------------------------------


D_plot = linspace(min(D), max(D), 100); 


color_map = lines(length(return_periods)); 

figure;
hold on;


for return_periods_index = 1:length(return_periods)
    T = return_periods{return_periods_index};
    gumbel_data = H_Gum(return_periods_index, :); 
    best_params = calibrated_params(return_periods_index, 1:3); 

  
    h_estimated = estimated_rainfall_depth(D_plot, best_params(1), best_params(2), best_params(3));

   
    plot(D_plot, h_estimated, '--', 'Color', color_map(return_periods_index, :), ...
        'DisplayName', ['DDF Curve T=' T ' years'], 'LineWidth', 2);

   
    scatter(D, gumbel_data, 50, color_map(return_periods_index, :), 'filled', ...
        'DisplayName', ['Gumbel Estimates T=' T ' years']);
end


xlabel('Duration (hours)');
ylabel('Rainfall Depth (mm)');
title('Depth-Duration-Frequency (DDF) Curves');
legend('show');
grid on;
hold off;



%-------------------------------------------------------------------
% # 3: Calculate h estimated
%-------------------------------------------------------------------


function [h] = estimated_rainfall_depth(D,c,e,f)
    h = (c * D) ./ (D.^e + f); % Use ./ and .^ for element-wise operations
end 

function error = sum_squared_differences(D, gumbel_data, c, e, f)

    error = 0; 
    for i = 1:length(D)
        durations = D(i);
        h_gumbel = gumbel_data(i);
        h_estimated = estimated_rainfall_depth(durations, c, e, f);
        error = error + (h_estimated - h_gumbel)^2; 
    end
end



